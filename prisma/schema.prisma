//Crear migraciones con npx prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MatchStatistic {
  id             Int       @id @default(autoincrement())
  matchId        Int?
  playerId       Int?
  goals          Int?
  assists        Int?
  yellowCards    Int?
  redCards       Int?
  minutesPlayed  Int?
  match          Match?    @relation(fields: [matchId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  player         Player?   @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Match {
  id                 Int               @id @default(autoincrement())
  tournamentId       Int?
  homeTeamId         Int?
  awayTeamId         Int?
  date               DateTime          @db.Timestamp(6)
  duration           Int?
  result             String?           @db.VarChar(50)
  matchStatistics    MatchStatistic[]
  homeTeam           Team?             @relation("HomeTeam", fields: [homeTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  awayTeam           Team?             @relation("AwayTeam", fields: [awayTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tournament         Tournament?       @relation(fields: [tournamentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Player {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  teamId                Int?
  matchStatistics       MatchStatistic[]
  team                  Team?                   @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tournamentStatistics  TournamentStatistic[]
}

model Team {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(100)
  coachId         Int?
  homeMatches     Match[]   @relation("HomeTeam")
  awayMatches     Match[]   @relation("AwayTeam")
  players         Player[]
  coach           User?     @relation(fields: [coachId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model TournamentStatistic {
  id              Int         @id @default(autoincrement())
  tournamentId    Int?
  playerId        Int?
  goals           Int?
  assists         Int?
  yellowCards     Int?
  redCards        Int?
  player          Player?     @relation(fields: [playerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tournament      Tournament? @relation(fields: [tournamentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Tournament {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  organizerId           Int?
  startDate             DateTime                @db.Date
  endDate               DateTime?               @db.Date
  matches               Match[]
  tournamentStatistics  TournamentStatistic[]
  organizer             User?                   @relation(fields: [organizerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// TODO: implements ENUM for role y que sea default user

model User {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  email       String     @unique @db.VarChar(100)
  password    String     @db.VarChar(100)
  role        String     @db.VarChar(50)
  teams       Team[]
  tournaments Tournament[]
}
